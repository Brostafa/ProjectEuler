/**
 * @problem_num
 * Problem 2
 * 
 * @title
 * Even Fibonacci numbers
 * 
 * @desc
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * @problem
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * 
 * @link
 * https://projecteuler.net/problem=2
 */

const DO_NOT_EXCEED = 4 * 1000 * 1000 // 4 million

const CACHE = {
  0: 0,
  1: 1,
  2: 1,
}

// https://en.wikipedia.org/wiki/Fibonacci_number#Definition
const fibonacci = (n) => {
  if (typeof CACHE[n] !== 'undefined') {
    return CACHE[n]
  }

  const result = fibonacci(n - 1) + fibonacci(n - 2)

  CACHE[n] = result

  return result
}

const isEven = n => n % 2 === 0

const solution = (maxNumber) => {
  let lastNumber = 0
  let fibCounter = 1
  let sum = 0

  while (lastNumber < maxNumber) {
    const fib = fibonacci(fibCounter)

    sum += isEven(fib) ? fib : 0
    lastNumber = fib
    fibCounter++
  }

  return sum
}

console.log(
  solution(DO_NOT_EXCEED)
)