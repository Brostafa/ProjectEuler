/**
 * @problem_num
 * Problem 12
 * 
 * @title
 * Highly divisible triangular number
 * 
 * @desc
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * @problem
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @link
 * https://projecteuler.net/problem=12
 */


/**
 * Time complexity (I am not sure about this one but it's most likely WRONG)
 * 
 * O(N * M)
 * N = DIVISOR_NUM
 * M = N * (N + 1) / 2
 */
const DIVISOR_NUM = 500


const getSum = n => (n * (n + 1)) / 2

const getDivs = n => {
  let divs = 0

  // Note that this loop runs till square root
  for (let i = 1; i <= Math.sqrt(n); i++) {
    // No reminder
    if (n % i === 0) {
      // If N / I === I then it means we are dealing with sqrt of the number (N)
      // e.g: 36 / 6 === 6
      // so we have 1 divisors in that case which is (6)
      if (n / i === i) {
        divs++
      } else {
        // else we are dealing with quiotent
        // e.g: 36 / 4 === 9
        // So we have 2 divisors (4 and 9)
        divs += 2
      }
    }
  }

  return divs
}

const solution = (maxDivisors) => {
  for (let num = 0; num < Infinity; num++) {
    const sum = getSum(num)

    // Only check for even numbers (skip odds as they could be prime)
    // and in general even numbers have higher divisors than odd
    if (sum % 2 !== 0) {
      continue
    }
    
    const divs = getDivs(sum)

    if (divs >= maxDivisors) {
      return sum
    }
  }
}

const now = Date.now()

const answer = solution(DIVISOR_NUM)

console.log(`Execution Time: ${Date.now() - now}ms\nAnswer: ${answer}`)
